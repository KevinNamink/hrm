{# templates/num_parameter.twig #}
{# Extend base at the caller for correct rendering. #}

{% block head %}
    <link rel="stylesheet" href="css/num_parameter.css">
{% endblock %}

{# Default values. #}
{% if min is not defined %}
    {% set min = 0 %}
{% endif %}
{% if max is not defined %}
    {% set max = 1000 %}
{% endif %}
{% if step is not defined %}
    {% set step = 0.1 %}
{% endif %}


{% block main %}
    {# From the bootstrap docs: use 'form-horizontal' for aligned labels and entry fields. #}
    <div class="form-horizontal input-group">
        <label for="basic-addon1"">{{ label }}
        </label>
        <div class="input-group">
            <span class="input-group-btn">
                <button class="btn btn-default btn-number" type="button"
                        data-type="minus" data-field="{{ varName }}">
                    <span class="glyphicon glyphicon-minus">
                    </span>
                </button>
            </span>
            <input type="text" name="{{ varName }}" class="form-control input-number"
                   value="{{ min }}" min="{{ min }}" max="{{ max }}">
            <span class="input-group-btn">
                <button class="btn btn-default btn-number" type="button"
                        data-type="plus" data-field="{{ varName }}">
                    <span class="glyphicon glyphicon-plus">
                    </span>
                </button>
            </span>
        </div>
    </div>
{% endblock %}


{% block scripts %}
    <script type="text/javascript">
        $('.btn-number').click(function (e) {
            e.preventDefault();

            fieldName = $(this).attr('data-field');
            type = $(this).attr('data-type');
            var input = $("input[name='" + fieldName + "']");
            var currentVal = parseInt(input.val());
            if (!isNaN(currentVal)) {
                if (type == 'minus') {
                    if (currentVal > input.attr('min')) {
                        input.val(currentVal - 1).change();
                    }
                } else if (type == 'plus') {
                    if (currentVal < input.attr('max')) {
                        input.val(currentVal + 1).change();
                    }
                }
            } else {
                input.val(0);
            }
        });
        $('.input-number').focusin(function () {
            $(this).data('oldValue', $(this).val());
        });
        $('.input-number').change(function () {

            minValue = parseInt($(this).attr('min'));
            maxValue = parseInt($(this).attr('max'));
            valueCurrent = parseInt($(this).val());

            name = $(this).attr('name');
            if (valueCurrent >= minValue) {
                $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
            } else {
                $(this).val($(this).data('oldValue'));
            }
            if (valueCurrent <= maxValue) {
                $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
            } else {
                $(this).val($(this).data('oldValue'));
            }
        });
        $(".input-number").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            // Allow: Ctrl+A
            // Allow: home, end, left, right.
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1
                || (e.keyCode == 65 && e.ctrlKey === true)
                || (e.keyCode >= 35 && e.keyCode <= 39)) {
                // Let it happen, don't do anything.
                return;
            }
            // Ensure that it is a number and stop the keypress.
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });
    </script>
{% endblock %}