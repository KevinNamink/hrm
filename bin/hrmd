#!/bin/bash
#
# hrmd         Huygens Remote Manager daemon
#
# chkconfig: - 85 15
# description: Huygens Remote Manager daemon
# processname: hrmd
#
### BEGIN INIT INFO
# Provides: hrmd
# Required-Start:
# Description: The HRM Queue Manager daemon
### END INIT INFO
#
# This file is part of the Huygens Remote Manager
# Copyright and license notice: see license.txt

# Make sure to have a known locale environment for the script:
export LC_ALL=C

# Set the default for the PHP CLI binary (can be overridden in hrm.conf):
PHP_CLI="php"

# hrm.conf defines variable HRM_HOME
. /etc/hrm.conf

# Simplify the "sudo" usage below:
if [ -z "$SUSER" ] ; then
    CMD=""
else
    CMD="sudo -u $SUSER"
fi

# Global variables definition:
LOG_OUT="${HRM_LOG}/log.txt"
LOG_ERR="${HRM_LOG}/error_log.txt"
HRMD_PID="${HRM_LOG}/hrmd.pid"

usage_exit() {
    echo "Usage: $0 {start|stop|restart}"
    exit 1
}

start() {
    # TODO: as we're writing a PID file below, can't we just use it here?
    # Is an instance of the Queue Manager already running?
    inst=`ps aux | grep runHuygensRemoteManager.php`;
    if [[ $inst == *"php -q"* ]]
    then
        echo
        echo "The Queue Manager is already running: I won't start another instance."
        usage_exit
    fi
    
    cd "$HRM_HOME"/run
    # TODO: do we really need two different logfiles here?
    # TODO: should we rather append to them, instead of overwriting?
    echo Reporting to "$LOG_OUT" "$LOG_ERR"
    $CMD $PHP_CLI -q "$HRM_HOME"/run/runHuygensRemoteManager.php 1> "$LOG_OUT" 2> "$LOG_ERR" &
    if [ "$?" = 0 ]
    then
        sleep 3
        # TODO: As we're already relying on bash, we could probably just use
        # the job control feature and retrieve the PID using "jobs -p"?
        $CMD ps -o pid,command | grep "$HRM_HOME" | grep "php" | sed -e "s/^ * //" | cut -d" " -f1 > "$HRMD_PID"
        echo "Starting HRM daemon...................ok"
    fi
    # This will show if anything went wrong during the start up.
    tail "$LOG_OUT"
}


stop() {
    if [ -f "$HRMD_PID" ]
    then
        $CMD kill -9 $(more "$HRMD_PID")
        
        if [ "$?" = 0 ]
        then
            $CMD rm -f "$HRMD_PID"
            echo "Shutting down HRM daemon..............ok"
        fi
    fi
}


case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    *)
        usage_exit
esac

