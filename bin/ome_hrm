#!/bin/bash

# hrm.conf defines variables OMERO_PKG
. /etc/hrm.conf

log() {
    echo "$1" >&2
}

usage_exit() {
    if [ -n "$1" ] ; then
        echo "$1"
        echo
    fi
    echo "Usage: $0  { checkCredentials |
                       retrieveUserTree |
                       OMEROtoHRM       |
                       HRMtoOMERO       } args"
    exit 1
}

initialize () {

    if [ -z "$1" ]; then
        usage_exit "Missing user login."
    fi

    if [ -z "$2" ]; then
        usage_exit "Missing user password."
    fi

    USER_LOGIN=$1
    USER_PASSD=$2

    # The user running the OMERO commands (usually the same running apache)
    # needs to have r/w permissions for the $HRM_DATA area.
    OMERO_EXEC="$OMERO_PKG/bin/omero"
}


checkCredentials () {

     initialize $1 $2

     # Try to log in.
     omeroLogin

     # Try to log out in any case.
     omeroLogout

     # If we couldn't get the user id, the credentials weren't Ok.
     if [ -z "$USER_ID" ];
     then
       echo "-1"
     else
       echo $USER_ID
     fi
}


omeroLogin () {

    $OMERO_EXEC login -u $USER_LOGIN \
                      -w $USER_PASSD \
                      -s $OMERO_HOSTNAME \
                      -p $OMERO_PORT

    retrieveUserId
}


omeroLogout () {
    $OMERO_EXEC logout
}


omero_query() {
    log "QUERYING OMERO-DB: $1"
    # TODO: capture output of omero-query somewhere
    # by default results are limited to 25, we need to disable this (-1)
    $OMERO_EXEC hql -q --limit -1 "$1" 2>/dev/null
}


retrieveUserId () {

    # Retrieve the user id.
    QRY="select i.id from Experimenter i where i.omeName='$USER_LOGIN'"
    RES=$(omero_query "$QRY")

    # Parse the data and return just the id.
    USER_ID=$(expr "$RES" : '.* | \(.*\) .*(.*')
}


retrieveUserProjects() {
    log "Retrieving user's projects."
    RES=$(omero_query "SELECT i.id FROM Project i")

    # head/tail - remote header/footer
    # cut       - remove index column
    # tr        - remove newlines (optional)
    USER_PROJECTS=$(echo "$RES" | head -n -1 | tail -n +3 | cut -d '|' -f 2 | tr -d '\n')
    log "User project ID's: $USER_PROJECTS"
}


retrieveProjectName() {
    if [ -z "$1" ] ; then
        echo "Missing project id."
    else
        PROJECT_ID=$1
    fi

    log "Retrieving project name for project id $PROJECT_ID."
    QRY="SELECT i.name FROM Project i WHERE i.id='$PROJECT_ID'"
    RES=$(omero_query "$QRY")

    # sed -n - print only third line
    # sed    - remove first column
    PROJECT_NAME=$(echo "$RES" | sed -n '3p' | sed 's,^.* | ,,')
    log "Project name: $PROJECT_NAME"
}


retrieveProjectDatasets () {

    PROJECT_ID=$1

    log "Retrieving datasets for project $PROJECT_ID."
    QRY="select child from ProjectDatasetLink where parent='$PROJECT_ID'"
    RES=$(omero_query "$QRY")

    # Parse and print the project datasets.
    RES=${RES#*0}
    RES=${RES%(*}

    ARR=( $(echo $RES | tr " | " "\n") )

    PROJECT_DATA=''
    key=-1
    for x in ${ARR[@]}
    do
      ((key++))

      if [ $x == "DatasetI" ]
      then
        PROJECT_DATA=$PROJECT_DATA" ${ARR[$key+1]}"
      fi
    done
    log "Project datasets for id $PROJECT_ID: $PROJECT_DATA"
}


retrieveDatasetName () {

    if [ -z "$1" ];
    then
        echo "Missing dataset ID.\n"
    else
        DATASET_ID=$1
    fi

    # Retrieve the dataset name.
    QRY="select name from Dataset where id='$DATASET_ID'"
    RES=$(omero_query "$QRY")

    # Parse and print the dataset name.
    RES=${RES#*0}
    RES=${RES%(*}

    DATASET_NAME=$(echo $RES | tr " | " " ")
    DATASET_NAME=$(echo $DATASET_NAME | tr -d ' ')
    log "$DATASET_NAME"
}


retrieveDatasetImages () {

    DATASET_ID=$1

    # Retrieve the dataset images.
    QRY="select I.id from Image I, DatasetImageLink D where I.id = D.child "
    QRY=$QRY"AND I.archived = 't' AND parent='$DATASET_ID'"
    RES=$(omero_query "$QRY")

    # Parse and print the dataset images.
    RES=${RES#*0}
    RES=${RES%(*}

    ARR=( $(echo $RES | tr " | " "\n") )
    DATASET_IMAGES=''

    key=-1
    for x in $ARR
    do
      ((key++))

      rem=$(($key%2))

      if [ $rem -eq 0 ]
      then
        if [[ "$x" =~ ^[0-9]+$ ]];
        then
           DATASET_IMAGES=$DATASET_IMAGES" $x"
        fi
      fi
    done
}


retrieveImageName () {

    if [ -z "$1" ];
    then
        echo "Missing image id.\n"
    else
        IMAGE_ID=$1
    fi

    # Retrieve the image name.
    QRY="select name from Image where id='$IMAGE_ID'"
    RES=$(omero_query "$QRY")

    # Parse and print the image name.
    RES=${RES#*0}
    RES=${RES%(*}

    IMAGE_NAME=$(echo $RES | tr " | " " ")
    IMAGE_NAME=$(echo $IMAGE_NAME | tr -d ' ')
}


retrieveArchivedImageId () {

    if [ -z "$1" ];
    then
        echo "Missing image id.\n"
    else
        IMAGE_ID=$1
    fi

    # Retrieve the archived image id.
    QRY="select o.id from Image i join i.pixels p join p.pixelsFileMaps m "
    QRY=$QRY"join m.parent o where i.id=$IMAGE_ID"
    RES=$(omero_query "$QRY")

    # Parse and print the archived image id.
    RES=${RES#*0}
    RES=${RES%(*}
    RES=${RES#*|}
    RES=${RES%|*}

    ARR=( $(echo $RES | tr " " "\n") )
    ARCHIVED_ID=${ARR[0]}
}


retrieveUserTree () {

    # FIXME: this can be accelerated several orders of magnitude by requesting
    # the whole information at once and processing it locally, instead of
    # launching the omero tool individually for each piece, e.g.
    ## omero hql -q --limit -1 'SELECT p.id, pdl.parent, p.name, \
    ##    pdl.child, ds.name, dil.child, i.id, i.name \
    ##      FROM Project p, ProjectDatasetLink pdl, Dataset ds, \
    ##           DatasetImageLink dil, Image i \
    ##      WHERE pdl.parent=p.id AND pdl.child=ds.id AND \
    ##            dil.parent=pdl.child AND dil.child=i.id'
    ## omero hql -q --limit -1 \
    ##     'SELECT p.id, p.name, ds.id, ds.name, i.id, i.name \
    ##      FROM Project p, ProjectDatasetLink pdl, Dataset ds, \
    ##           DatasetImageLink dil, Image i \
    ##      WHERE pdl.parent=p.id \
    ##            AND pdl.child=ds.id \
    ##            AND dil.parent=pdl.child \
    ##            AND dil.child=i.id'


    initialize $1 $2

    omeroLogin $USER_LOGIN $USER_PASSD

    retrieveUserProjects

    USER_TREE=''

    for project in $USER_PROJECTS
    do

       retrieveProjectName $project

       USER_TREE=$USER_TREE"<Project>$PROJECT_NAME"

       USER_TREE=$USER_TREE"<id>$project</id>"

       retrieveProjectDatasets $project

       for dataset in $PROJECT_DATA
       do

          retrieveDatasetName $dataset

          USER_TREE=$USER_TREE"<Dataset>$DATASET_NAME"

          USER_TREE=$USER_TREE"<id>$dataset</id>"

          retrieveDatasetImages $dataset

          for image in $DATASET_IMAGES
          do

             retrieveImageName $image

             USER_TREE=$USER_TREE"<Image>$IMAGE_NAME"

             USER_TREE=$USER_TREE"<id>$image</id>"

             USER_TREE=$USER_TREE"</Image>"

          done

          USER_TREE=$USER_TREE"</Dataset>"

       done

       USER_TREE=$USER_TREE"</Project>"

    done

    omeroLogout

    echo $USER_TREE
}


exportImage () {
    # Download an image from OMERO to the local filesystem.
    #
    # \param  $USERNAME  OMERO username.
    # \param  $PASSWORD  OMERO password.
    # \param  $ID        OMERO image id.
    # \param  $DEST      Destination to store the downloaded image.
    initialize $1 $2

    if [ -z "$3" ];
    then
        echo "Missing Omero's image id.\n"
    else
        IMAGE_ID=$3
    fi

    if [ -z "$4" ];
    then
        echo "Missing image destination path.\n"
    else
        IMAGE_DEST=$4
    fi

    omeroLogin $USER_LOGIN $USER_PASSD

    retrieveArchivedImageId $IMAGE_ID

    if [[ "$ARCHIVED_ID" =~ ^[0-9]+$ ]];
    then
       $OMERO_EXEC download $ARCHIVED_ID $IMAGE_DEST
    fi

    omeroLogout
}


importImage () {

    initialize $1 $2

    if [ -z "$3" ];
    then
        echo "Missing Omero's dataset id.\n"
    else
        DATASET_ID=$3
    fi

    if [ -z "$4" ];
    then
        echo "Missing path to image.\n"
    else
        IMAGE_PATH=$4
    fi

    if [ -z "$5" ];
    then
        echo "Missing image name.\n"
    else
        IMAGE_NAME=$5
    fi

    if [ -z "$6" ];
    then
        echo "Missing annotation text.\n"
    else
        ANNOTATION_TEXT="$6"
    fi

    omeroLogin $USER_LOGIN $USER_PASSD

    $OMERO_EXEC import $IMAGE_PATH -d $DATASET_ID -n $IMAGE_NAME \
        -c -x "Deconvolved with Huygens" \
        --annotation_ns "HuygensDeconvolved" \
        --annotation_text "$ANNOTATION_TEXT"

    omeroLogout
}


# ------------------------------ 'Main' ------------------------------------- #

COMMAND="$1"
shift

case $COMMAND in
    checkCredentials)
        checkCredentials "$@"
        ;;
    retrieveUserTree)
        retrieveUserTree "$@"
        ;;
    OMEROtoHRM)
        exportImage "$@"
        ;;
    HRMtoOMERO)
        importImage "$@"
        ;;
    *)
        usage_exit
esac
