#!/bin/bash

# hrm.conf defines variables OMERO_PKG
. /etc/hrm.conf

log() {
    echo "$1" >&2
}

usage_exit() {
    if [ -n "$1" ] ; then
        echo "$1"
        echo
    fi
    echo "Usage: $0  { checkCredentials |
                       retrieveUserTree |
                       OMEROtoHRM       |
                       HRMtoOMERO       } args"
    exit 1
}

initialize () {

    if [ -z "$1" ]; then
        usage_exit "Missing user login."
    fi

    if [ -z "$2" ]; then
        usage_exit "Missing user password."
    fi

    USER_LOGIN=$1
    USER_PASSD=$2

    # The user running the OMERO commands (usually the same running apache)
    # needs to have r/w permissions for the $HRM_DATA area.
    OMERO_EXEC="$OMERO_PKG/bin/omero"
}


checkCredentials () {

     initialize $1 $2

     # Try to log in.
     omeroLogin

     # Try to log out in any case.
     omeroLogout

     # If we couldn't get the user id, the credentials weren't Ok.
     if [ -z "$USER_ID" ];
     then
       echo "-1"
     else
       echo $USER_ID
     fi
}


omeroLogin () {

    $OMERO_EXEC login -u $USER_LOGIN \
                      -w $USER_PASSD \
                      -s $OMERO_HOSTNAME \
                      -p $OMERO_PORT

    retrieveUserId
}


omeroLogout () {
    $OMERO_EXEC logout
}


omero_query() {
    log "QUERYING OMERO-DB: $1"
    # TODO: capture output of omero-query somewhere
    # by default results are limited to 25, we need to disable this (-1)
    $OMERO_EXEC hql -q --limit -1 "$1" 2>/dev/null
}


retrieveUserId () {

    # Retrieve the user id.
    QRY="select i.id from Experimenter i where i.omeName='$USER_LOGIN'"
    RES=$(omero_query "$QRY")

    # Parse the data and return just the id.
    USER_ID=$(expr "$RES" : '.* | \(.*\) .*(.*')
}


retrieveArchivedImageId () {

    if [ -z "$1" ];
    then
        echo "Missing image id.\n"
    else
        IMAGE_ID=$1
    fi

    # Retrieve the archived image id.
    QRY="select o.id from Image i join i.pixels p join p.pixelsFileMaps m "
    QRY=$QRY"join m.parent o where i.id=$IMAGE_ID"
    RES=$(omero_query "$QRY")

    # Parse and print the archived image id.
    RES=${RES#*0}
    RES=${RES%(*}
    RES=${RES#*|}
    RES=${RES%|*}

    ARR=( $(echo $RES | tr " " "\n") )
    ARCHIVED_ID=${ARR[0]}
}

get_uniq_cols() {
    echo "$1" | cut -d '|' -f "$2" | sort -n | uniq
}

retrieveUserTree() {

    initialize $1 $2

    omeroLogin $USER_LOGIN $USER_PASSD

    USER_TREE=''

    QRY="SELECT p.id, p.name, ds.id, ds.name, i.id, i.name
         FROM Project p, ProjectDatasetLink pdl, Dataset ds,
             DatasetImageLink dil, Image i
         WHERE pdl.parent=p.id
             AND pdl.child=ds.id
             AND dil.parent=pdl.child
             AND dil.child=i.id"
    RES=$(omero_query "$QRY" | head -n -1 | tail -n +3 |
          sed 's,  *|  *,|,g' | cut -d '|' -f 2-)

    PROJS=$(get_uniq_cols "$RES" "1,2")
    while read -r proj ; do
        PROJ_ID=$(echo "$proj" | cut -d '|' -f 1)
        PROJ_NAME=$(echo "$proj" | cut -d '|' -f 2)
        USER_TREE+="<Project>$PROJ_NAME<id>$PROJ_ID</id>"

        DATASETS=$(get_uniq_cols "$RES" "1,3,4" |
                   grep "^$PROJ_ID|" | cut -d '|' -f 2-)
        while read -r dset ; do
            DS_ID=$(echo "$dset" | cut -d '|' -f 1)
            DS_NAME=$(echo "$dset" | cut -d '|' -f 2)
            USER_TREE+="<Dataset>$DS_NAME<id>$DS_ID</id>"

            IMAGES=$(get_uniq_cols "$RES" "3,5,6" |
                     grep "^$DS_ID|" | cut -d '|' -f 2-)
            while read -r img ; do
                IMG_ID=$(echo "$img" | cut -d '|' -f 1)
                IMG_NAME=$(echo "$img" | cut -d '|' -f 2)
                USER_TREE+="<Image>$IMG_NAME<id>$IMG_ID</id></Image>"
            done <<< "$IMAGES"
            USER_TREE+="</Dataset>"
        done <<< "$DATASETS"
        USER_TREE+="</Project>"
    done <<< "$PROJS"

    omeroLogout

    echo $USER_TREE
}


exportImage () {
    # Download an image from OMERO to the local filesystem.
    #
    # \param  $USERNAME  OMERO username.
    # \param  $PASSWORD  OMERO password.
    # \param  $ID        OMERO image id.
    # \param  $DEST      Destination to store the downloaded image.
    initialize $1 $2

    if [ -z "$3" ];
    then
        echo "Missing Omero's image id.\n"
    else
        IMAGE_ID=$3
    fi

    if [ -z "$4" ];
    then
        echo "Missing image destination path.\n"
    else
        IMAGE_DEST=$4
    fi

    omeroLogin $USER_LOGIN $USER_PASSD

    retrieveArchivedImageId $IMAGE_ID

    if [[ "$ARCHIVED_ID" =~ ^[0-9]+$ ]];
    then
       $OMERO_EXEC download $ARCHIVED_ID $IMAGE_DEST
    fi

    omeroLogout
}


importImage () {

    initialize $1 $2

    if [ -z "$3" ];
    then
        echo "Missing Omero's dataset id.\n"
    else
        DATASET_ID=$3
    fi

    if [ -z "$4" ];
    then
        echo "Missing path to image.\n"
    else
        IMAGE_PATH=$4
    fi

    if [ -z "$5" ];
    then
        echo "Missing image name.\n"
    else
        IMAGE_NAME=$5
    fi

    if [ -z "$6" ];
    then
        echo "Missing annotation text.\n"
    else
        ANNOTATION_TEXT="$6"
    fi

    omeroLogin $USER_LOGIN $USER_PASSD

    $OMERO_EXEC import $IMAGE_PATH -d $DATASET_ID -n $IMAGE_NAME \
        -c -x "Deconvolved with Huygens" \
        --annotation_ns "HuygensDeconvolved" \
        --annotation_text "$ANNOTATION_TEXT"

    omeroLogout
}


# ------------------------------ 'Main' ------------------------------------- #

COMMAND="$1"
shift

case $COMMAND in
    checkCredentials)
        checkCredentials "$@"
        ;;
    retrieveUserTree)
        retrieveUserTree "$@"
        ;;
    OMEROtoHRM)
        exportImage "$@"
        ;;
    HRMtoOMERO)
        importImage "$@"
        ;;
    *)
        usage_exit
esac
