<?php
// This file is part of the Huygens Remote Manager
// Copyright and license notice: see license.txt

    // See http://adldap.sourceforge.net/wiki/doku.php?id=api_configuration for
    // detailed help on configuring adLdap.

    // The account suffix for your domain
    $ACCOUNT_SUFFIX = "@mydomain.local";

    // The base dn for your domain
    $BASE_DN = "DC=mydomain,DC=local";

    // Array of domain controllers. Specify multiple controllers if you would
    // like the class to balance the LDAP queries amongst multiple servers
    $DOMAIN_CONTROLLERS = array ("dc01.mydomain.local");

    // Domain controller port
    $AD_PORT = 389;


    //////// ActiveDirectory Multi-Domain User Name Processing ////////

    // SPECIAL SETTINGS to rewrite the username in case of an ActiveDirectory
    // FOREST, where users from all different LEVELS of the forest's hierarchy
    // should be allowed to log on using the "short" domain name variant (i.e.
    // "foo123@saturn", "bar456@titan", ...).
    // Setting the $ACCOUNT_SUFFIX above will not work in such a case due to
    // the fact how the DNS names in an ActiveDirectory forest are structured,
    // and therefore retrieving the user's email address would fail, even
    // though authentication might succeed.

    // Assuming this AD-forest structure (NetBIOS names in captial letters, DNS
    // names in brackets)
    //
    // SATURN                       (ads.saturn.local)
    // |__ TITAN              (titan.ads.saturn.local)
    // |__ DIONE              (dione.ads.saturn.local)
    // \__ MIMAS              (mimas.ads.saturn.local)
    //
    // and the following user names
    //
    //          foo123@ads.saturn.local
    //    bar456@titan.ads.saturn.local
    //    zap789@dione.ads.saturn.local
    //    cat963@mimas.ads.saturn.local
    //
    // the configuration settings below will allow all users from any domain to
    // use the short versions "foo123@saturn", "bar456@titan", "zap789@dione"
    // and "cat963@mimas" for logging in, instead of having to type their full
    // DNS user names as shown above:
    //
    // $AD_USERNAME_SUFFIX = ".ads.saturn.local";
    // $AD_USERNAME_SUFFIX_PATTERN = "@saturn.ads.saturn.local";
    // $AD_USERNAME_SUFFIX_REPLACE = "@ads.saturn.local";

    // LEAVE EMPTY in a REGULAR ActiveDirectory setup (i.e. no AD-forest)!!
    $AD_USERNAME_SUFFIX = "";
    $AD_USERNAME_SUFFIX_PATTERN = "";
    $AD_USERNAME_SUFFIX_REPLACE = "";
    // NOTE: if the AD_USERNAME_... settings are used, the ACCOUNT_SUFFIX above
    // should generally be empty!!!

    //////// ActiveDirectory Multi-Domain User Name Processing ////////


    // Optional account with higher privileges for searching (otherwise
    // leave it to NULL). This should be set to a domain admin account (only
    // read operations are performed!)
    $AD_USERNAME = NULL;
    $AD_PASSWORD = NULL;

    // Tweak to get the real primary group from Active Directory. It works if
    // the user's primary group is domain users.
    // http://support.microsoft.com/?kbid=321360
    $REAL_PRIMARY_GROUP = true;

    // Use SSL (LDAPS)
    $USE_SSL = false;

    // Use TLS: if you wish to use TLS you should ensure that $USE_SSL is
    // set to false and vice-versa
    $USE_TLS = false;

    // When querying group memberships, do it recursively
    $RECURSIVE_GROUPS = true;

    // Group filtering and authorization.
    //
    // Users in Active Directory usually belong to several groups. Many of those groups
    // will not be relevant for the administrator of the HRM (groups like 'Domain Users',
    // 'Building 12', 'Staff') and the important ones, like the research group, are hidden
    // somewhere in this list.
    //
    // The $VALID_GROUPS array can be used to specify only those groups that are interesting
    // for the HRM and that will be used as the user group in the HRM and will show up in the
    // usage statistics. For example, only the research groups at the institution might be included
    // in this list.
    //
    // Additionally, not all research groups might be allowed to use the HRM. The $AUTHORIZED_GROUPS
    // array can be used to specify those groups that are allowed to use the HRM.
    //
    // Please notice that $AUTHORIZED_GROUPS must not strictly be a subset of $VALID_GROUPS.
    //
    // Example 1
    // =========
    //
    // $AUTHORIZED_GROUPS = array('group_einstein', 'group_bohr');
    // $VALID_GROUPS = array('group_einstein', 'group_bohr');
    //
    // User 'john' has groups {'Domain Users', 'Building 12', 'Staff', 'group_einstein'}
    //
    // 'john' is allowed to log in and the group used in HRM is 'group_einstein'.
    //
    // User 'stephanie' has groups {'Domain Users', 'Building 12', 'Staff', 'group_bohr'}
    //
    // 'stephanie' is allowed to log in and the group used in HRM is 'group_bohr'.
    //
    // User 'jeff' has groups {'Domain Users', 'Building 1', 'Admin Staff', 'group_admin'}
    //
    // 'jeff' is not allowed to log in ('group_admin' is not in $AUTHORIZED_GROUPS)'.
    //
    // Example 2
    // =========
    //
    // $AUTHORIZED_GROUPS = array('hrm');
    // $VALID_GROUPS = array('group_einstein', 'group_bohr');
    //
    // User 'john' has groups {'Domain Users', 'Building 12', 'Staff', 'group_einstein', 'hrm'}
    //
    // 'john' is allowed to log in and the group used in HRM is 'group_einstein'.
    //
    // User 'stephanie' has groups {'Domain Users', 'Building 12', 'Staff', 'group_bohr'}
    //
    // 'stephanie' is not allowed to log in (she does not belong to group 'hrm').
    //
    // User 'jeff' has groups {'Domain Users', 'Building 1', ''Admin Staff', 'group_admin'}
    //
    // 'jeff' is not allowed to log in (she does not belong to group 'hrm').
    //
    // Example 3
    // =========
    //
    // $AUTHORIZED_GROUPS = array();
    // $VALID_GROUPS = array('group_einstein', 'group_bohr');
    //
    // No restriction on which groups can log in to HRM. Group filtering works as in Examples 1 and 2.
    //
    // Example 4
    // =========
    //
    // $AUTHORIZED_GROUPS = array();
    // $VALID_GROUPS = array();
    //
    // If neither valid nor authorized groups are defined, all groups are allowed to log in and the first returned
    // group will be used in HRM.
    //
    // User 'john' has groups {'Domain Users', 'Building 12', 'Staff', 'group_einstein', 'hrm'}
    //
    // john's group in HRM will be 'Domain Users'.
    //
    // Example 5
    // =========
    //
    // $AUTHORIZED_GROUPS = array(... any number of entries ...);
    // $VALID_GROUPS = array();
    //
    // If $VALID_GROUPS is empty and $AUTHORIZED_GROUPS contains one or more entries, $VALID_GROUPS
    // will be reset to be the same as $AUTHORIZED_GROUPS (the end behavior will be as in Example 1).

    // Groups to use in HRM (filter)
    $VALID_GROUPS = array();

    // Groups authorized to log in to HRM.
    $AUTHORIZED_GROUPS = array();

?>
